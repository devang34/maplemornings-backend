// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  email    String  @unique
  password String
  age      Int?
  disease  String?
  role     Role    @default(USER)

  token    Token?
  orders   Order[]

  Cart Cart?
}

model Dish {
  id       Int     @id @default(autoincrement())
  name     String
  info     String 
  meals    String  
  price    String
  image    String
  
  diseases Disease[] @relation("DishDiseases")
  orders   Order[]

  CartItem CartItem[]
}

model Disease {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  desc       String
  prevention String   

  dishes     Dish[]   @relation("DishDiseases") 
}


model Token {
  id        String   @id @default(uuid())
  userId    Int   @unique
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  quantity      Int       
  totalAmount   Float     
  status        OrderStatus @default(PENDING) 
  paymentStatus PaymentStatus @default(PENDING)
  paymentMethod PaymentMethod? 

  userId        Int      
  user          User      @relation(fields: [userId], references: [id])

  dishId        Int       
  dish          Dish      @relation(fields: [dishId], references: [id])

  address       String
  pincode       String

  couponId      Int?      // Foreign key for applied coupon
  coupon        Coupon?   @relation(fields: [couponId], references: [id]) 
}

model Cart {
  id            Int       @id @default(autoincrement())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        Int       @unique // Ensures only one cart per user
  user          User      @relation(fields: [userId], references: [id])

  items         CartItem[]
}

model CartItem {
  id        Int     @id @default(autoincrement())
  quantity  Int
  dishId    Int
  dish      Dish    @relation(fields: [dishId], references: [id])
  cartId    Int
  cart      Cart    @relation(fields: [cartId], references: [id])
}

model Coupon {
  id                 Int       @id @default(autoincrement())
  code               String    @unique
  discountPercentage Float
  maxDiscountAmount  Float
  expiryDate         DateTime
  isActive           Boolean   @default(true)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  orders             Order[]   // Relation with Order for applied coupons
}


enum OrderStatus {
  PENDING
  CONFIRMED
  CANCELLED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  STRIPE
  CASH_ON_DELIVERY
}